'use strict';

import { octave } from './lib/helpers';

/**
 * The A above middle C is commonly used to set other pitches in the scale against
 */
const fixedNotePitch = 'a4';
const fixedNoteIndex = octave.indexOf(fixedNotePitch);

/**
 * A4 can correspond to any frequency, but 440Hz is widely used for modern music.
 */
const fixedNoteFreq = 440;

/**
 * The relationship between any two adjacent pitches in 12tet is the 12th root of 2, 
 * that is, that number which, when multiplied by itself 12 time, yields 2.
 */
const pitchDistance = Math.pow(2, (1 / 12))

/**
 * Represents one key in the synthesizer keyboard.
 * Each key has a QWERTY key code and key name, pitch (piano key name), 
 * integer distance from fixed note (measured in half steps), and frequency.
 * Note that all params are passed in from the Keyboard class, and are generated by the helpers file.
 * @constructor
 * @param {string} pitch
 * @param {number} qwertyCode
 * @param {string} qwertyName
 */
export class Key {
  constructor(pitch, qwertyCode, qwertyName) {
    this.pitch = pitch;
    this.qwertyCode = qwertyCode;
    this.qwertyName = qwertyName;

    const stepDistance = this.getStepDistance(pitch);
    this.frequency = this.getFrequency(stepDistance);
  }

  /**
   * Returns a positive or negative integer indicating the number of half steps from the fixed note
   * @param {string} pitch 
   */
  getStepDistance(pitch) {
    return octave.indexOf(pitch) - fixedNoteIndex;
  }

  /**
   * Returns the frequency (Hz) associated with a given pitch (to three decimal places).
   * Refer to lib/notes.js for more documentation on how frequency is calculated.
   * @param {number} stepDistance 
   */
  getFrequency(stepDistance) {
    const frequency = fixedNoteFreq * Math.pow(pitchDistance, stepDistance);
    return frequency.toFixed(3);
  }
}